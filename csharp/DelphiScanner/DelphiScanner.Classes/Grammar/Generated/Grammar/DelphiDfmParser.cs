//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/DelphiDfm.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class DelphiDfmParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, BOOLEAN=13, STRING=14, IDENTIFIER=15, NUMBER=16, 
		WS=17, BLOCK_COMMENT=18, LINE_COMMENT=19;
	public const int
		RULE_dfmFile = 0, RULE_objectDeclaration = 1, RULE_objectBody = 2, RULE_property = 3, 
		RULE_sqlProperty = 4, RULE_genericProperty = 5, RULE_value = 6, RULE_stringList = 7, 
		RULE_arrayValue = 8, RULE_arrayItems = 9, RULE_stringListItems = 10;
	public static readonly string[] ruleNames = {
		"dfmFile", "objectDeclaration", "objectBody", "property", "sqlProperty", 
		"genericProperty", "value", "stringList", "arrayValue", "arrayItems", 
		"stringListItems"
	};

	private static readonly string[] _LiteralNames = {
		null, "'object'", "':'", "'end'", "'SQL'", "'.'", "'Strings'", "'='", 
		"'('", "')'", "'['", "']'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "BOOLEAN", "STRING", "IDENTIFIER", "NUMBER", "WS", "BLOCK_COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DelphiDfm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DelphiDfmParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DelphiDfmParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DelphiDfmParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DfmFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DelphiDfmParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericPropertyContext[] genericProperty() {
			return GetRuleContexts<GenericPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericPropertyContext genericProperty(int i) {
			return GetRuleContext<GenericPropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectDeclarationContext[] objectDeclaration() {
			return GetRuleContexts<ObjectDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectDeclarationContext objectDeclaration(int i) {
			return GetRuleContext<ObjectDeclarationContext>(i);
		}
		public DfmFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dfmFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterDfmFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitDfmFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDfmFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DfmFileContext dfmFile() {
		DfmFileContext _localctx = new DfmFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_dfmFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0 || _la==IDENTIFIER) {
				{
				State = 24;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 22;
					genericProperty();
					}
					break;
				case T__0:
					{
					State = 23;
					objectDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 29;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		public IToken objectName;
		public IToken className;
		[System.Diagnostics.DebuggerNonUserCode] public ObjectBodyContext objectBody() {
			return GetRuleContext<ObjectBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(DelphiDfmParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DelphiDfmParser.IDENTIFIER, i);
		}
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterObjectDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitObjectDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_objectDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			Match(T__0);
			State = 32;
			_localctx.objectName = Match(IDENTIFIER);
			State = 33;
			Match(T__1);
			State = 34;
			_localctx.className = Match(IDENTIFIER);
			State = 35;
			objectBody();
			State = 36;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectDeclarationContext[] objectDeclaration() {
			return GetRuleContexts<ObjectDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectDeclarationContext objectDeclaration(int i) {
			return GetRuleContext<ObjectDeclarationContext>(i);
		}
		public ObjectBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterObjectBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitObjectBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectBodyContext objectBody() {
		ObjectBodyContext _localctx = new ObjectBodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_objectBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32786L) != 0)) {
				{
				State = 40;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__3:
				case IDENTIFIER:
					{
					State = 38;
					property();
					}
					break;
				case T__0:
					{
					State = 39;
					objectDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SqlPropertyContext sqlProperty() {
			return GetRuleContext<SqlPropertyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericPropertyContext genericProperty() {
			return GetRuleContext<GenericPropertyContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 6, RULE_property);
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				sqlProperty();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				genericProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlPropertyContext : ParserRuleContext {
		public StringListContext queryText;
		[System.Diagnostics.DebuggerNonUserCode] public StringListContext stringList() {
			return GetRuleContext<StringListContext>(0);
		}
		public SqlPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterSqlProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitSqlProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlPropertyContext sqlProperty() {
		SqlPropertyContext _localctx = new SqlPropertyContext(Context, State);
		EnterRule(_localctx, 8, RULE_sqlProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			Match(T__3);
			State = 50;
			Match(T__4);
			State = 51;
			Match(T__5);
			State = 52;
			Match(T__6);
			State = 53;
			_localctx.queryText = stringList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DelphiDfmParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public GenericPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterGenericProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitGenericProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericPropertyContext genericProperty() {
		GenericPropertyContext _localctx = new GenericPropertyContext(Context, State);
		EnterRule(_localctx, 10, RULE_genericProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(IDENTIFIER);
			State = 56;
			Match(T__6);
			State = 57;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringValueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DelphiDfmParser.STRING, 0); }
		public StringValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierValueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DelphiDfmParser.IDENTIFIER, 0); }
		public IdentifierValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterIdentifierValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitIdentifierValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayValueTypeContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayValueContext arrayValue() {
			return GetRuleContext<ArrayValueContext>(0);
		}
		public ArrayValueTypeContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterArrayValueType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitArrayValueType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayValueType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringListValueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringListContext stringList() {
			return GetRuleContext<StringListContext>(0);
		}
		public StringListValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterStringListValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitStringListValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringListValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanValueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(DelphiDfmParser.BOOLEAN, 0); }
		public BooleanValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterBooleanValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitBooleanValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberValueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DelphiDfmParser.NUMBER, 0); }
		public NumberValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterNumberValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitNumberValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_value);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new StringValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				Match(STRING);
				}
				break;
			case IDENTIFIER:
				_localctx = new IdentifierValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				Match(IDENTIFIER);
				}
				break;
			case BOOLEAN:
				_localctx = new BooleanValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 61;
				Match(BOOLEAN);
				}
				break;
			case NUMBER:
				_localctx = new NumberValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 62;
				Match(NUMBER);
				}
				break;
			case T__7:
				_localctx = new StringListValueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 63;
				stringList();
				}
				break;
			case T__9:
				_localctx = new ArrayValueTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 64;
				arrayValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringListItemsContext stringListItems() {
			return GetRuleContext<StringListItemsContext>(0);
		}
		public StringListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterStringList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitStringList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringListContext stringList() {
		StringListContext _localctx = new StringListContext(Context, State);
		EnterRule(_localctx, 14, RULE_stringList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(T__7);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 68;
				stringListItems();
				}
			}

			State = 71;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayItemsContext arrayItems() {
			return GetRuleContext<ArrayItemsContext>(0);
		}
		public ArrayValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterArrayValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitArrayValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayValueContext arrayValue() {
		ArrayValueContext _localctx = new ArrayValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_arrayValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(T__9);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 74;
				arrayItems();
				}
			}

			State = 77;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(DelphiDfmParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DelphiDfmParser.IDENTIFIER, i);
		}
		public ArrayItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterArrayItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitArrayItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayItemsContext arrayItems() {
		ArrayItemsContext _localctx = new ArrayItemsContext(Context, State);
		EnterRule(_localctx, 18, RULE_arrayItems);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(IDENTIFIER);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 80;
				Match(T__11);
				State = 81;
				Match(IDENTIFIER);
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringListItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(DelphiDfmParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(DelphiDfmParser.STRING, i);
		}
		public StringListItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringListItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.EnterStringListItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiDfmListener typedListener = listener as IDelphiDfmListener;
			if (typedListener != null) typedListener.ExitStringListItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDelphiDfmVisitor<TResult> typedVisitor = visitor as IDelphiDfmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringListItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringListItemsContext stringListItems() {
		StringListItemsContext _localctx = new StringListItemsContext(Context, State);
		EnterRule(_localctx, 20, RULE_stringListItems);
		int _la;
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				Match(STRING);
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__11) {
					{
					{
					State = 88;
					Match(T__11);
					State = 89;
					Match(STRING);
					}
					}
					State = 94;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 95;
					Match(STRING);
					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STRING );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,19,103,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,5,0,25,8,0,10,0,12,0,28,9,0,1,0,
		1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,5,2,41,8,2,10,2,12,2,44,9,2,1,
		3,1,3,3,3,48,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
		6,1,6,1,6,3,6,66,8,6,1,7,1,7,3,7,70,8,7,1,7,1,7,1,8,1,8,3,8,76,8,8,1,8,
		1,8,1,9,1,9,1,9,5,9,83,8,9,10,9,12,9,86,9,9,1,10,1,10,1,10,5,10,91,8,10,
		10,10,12,10,94,9,10,1,10,4,10,97,8,10,11,10,12,10,98,3,10,101,8,10,1,10,
		0,0,11,0,2,4,6,8,10,12,14,16,18,20,0,0,107,0,26,1,0,0,0,2,31,1,0,0,0,4,
		42,1,0,0,0,6,47,1,0,0,0,8,49,1,0,0,0,10,55,1,0,0,0,12,65,1,0,0,0,14,67,
		1,0,0,0,16,73,1,0,0,0,18,79,1,0,0,0,20,100,1,0,0,0,22,25,3,10,5,0,23,25,
		3,2,1,0,24,22,1,0,0,0,24,23,1,0,0,0,25,28,1,0,0,0,26,24,1,0,0,0,26,27,
		1,0,0,0,27,29,1,0,0,0,28,26,1,0,0,0,29,30,5,0,0,1,30,1,1,0,0,0,31,32,5,
		1,0,0,32,33,5,15,0,0,33,34,5,2,0,0,34,35,5,15,0,0,35,36,3,4,2,0,36,37,
		5,3,0,0,37,3,1,0,0,0,38,41,3,6,3,0,39,41,3,2,1,0,40,38,1,0,0,0,40,39,1,
		0,0,0,41,44,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,5,1,0,0,0,44,42,1,0,
		0,0,45,48,3,8,4,0,46,48,3,10,5,0,47,45,1,0,0,0,47,46,1,0,0,0,48,7,1,0,
		0,0,49,50,5,4,0,0,50,51,5,5,0,0,51,52,5,6,0,0,52,53,5,7,0,0,53,54,3,14,
		7,0,54,9,1,0,0,0,55,56,5,15,0,0,56,57,5,7,0,0,57,58,3,12,6,0,58,11,1,0,
		0,0,59,66,5,14,0,0,60,66,5,15,0,0,61,66,5,13,0,0,62,66,5,16,0,0,63,66,
		3,14,7,0,64,66,3,16,8,0,65,59,1,0,0,0,65,60,1,0,0,0,65,61,1,0,0,0,65,62,
		1,0,0,0,65,63,1,0,0,0,65,64,1,0,0,0,66,13,1,0,0,0,67,69,5,8,0,0,68,70,
		3,20,10,0,69,68,1,0,0,0,69,70,1,0,0,0,70,71,1,0,0,0,71,72,5,9,0,0,72,15,
		1,0,0,0,73,75,5,10,0,0,74,76,3,18,9,0,75,74,1,0,0,0,75,76,1,0,0,0,76,77,
		1,0,0,0,77,78,5,11,0,0,78,17,1,0,0,0,79,84,5,15,0,0,80,81,5,12,0,0,81,
		83,5,15,0,0,82,80,1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,
		19,1,0,0,0,86,84,1,0,0,0,87,92,5,14,0,0,88,89,5,12,0,0,89,91,5,14,0,0,
		90,88,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,101,1,0,0,0,
		94,92,1,0,0,0,95,97,5,14,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,
		98,99,1,0,0,0,99,101,1,0,0,0,100,87,1,0,0,0,100,96,1,0,0,0,101,21,1,0,
		0,0,12,24,26,40,42,47,65,69,75,84,92,98,100
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
