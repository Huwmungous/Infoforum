// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/ClipboardSync.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ClipboardSyncService {
  public static partial class ClipboardSyncService
  {
    static readonly string __ServiceName = "clipboardsync.ClipboardSyncService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClipboardSyncService.ClipboardData> __Marshaller_clipboardsync_ClipboardData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClipboardSyncService.ClipboardData.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClipboardSyncService.SyncResponse> __Marshaller_clipboardsync_SyncResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClipboardSyncService.SyncResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClipboardSyncService.NodeInfo> __Marshaller_clipboardsync_NodeInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClipboardSyncService.NodeInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClipboardSyncService.RegistrationResponse> __Marshaller_clipboardsync_RegistrationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClipboardSyncService.RegistrationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClipboardSyncService.Empty> __Marshaller_clipboardsync_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClipboardSyncService.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClipboardSyncService.NodesResponse> __Marshaller_clipboardsync_NodesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClipboardSyncService.NodesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ClipboardSyncService.ClipboardData, global::ClipboardSyncService.SyncResponse> __Method_SyncClipboard = new grpc::Method<global::ClipboardSyncService.ClipboardData, global::ClipboardSyncService.SyncResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SyncClipboard",
        __Marshaller_clipboardsync_ClipboardData,
        __Marshaller_clipboardsync_SyncResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ClipboardSyncService.NodeInfo, global::ClipboardSyncService.RegistrationResponse> __Method_RegisterNode = new grpc::Method<global::ClipboardSyncService.NodeInfo, global::ClipboardSyncService.RegistrationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterNode",
        __Marshaller_clipboardsync_NodeInfo,
        __Marshaller_clipboardsync_RegistrationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ClipboardSyncService.Empty, global::ClipboardSyncService.NodesResponse> __Method_GetActiveNodes = new grpc::Method<global::ClipboardSyncService.Empty, global::ClipboardSyncService.NodesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActiveNodes",
        __Marshaller_clipboardsync_Empty,
        __Marshaller_clipboardsync_NodesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ClipboardSyncService.Empty, global::ClipboardSyncService.ClipboardData> __Method_StreamClipboardUpdates = new grpc::Method<global::ClipboardSyncService.Empty, global::ClipboardSyncService.ClipboardData>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamClipboardUpdates",
        __Marshaller_clipboardsync_Empty,
        __Marshaller_clipboardsync_ClipboardData);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ClipboardSyncService.ClipboardSyncReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ClipboardSyncService</summary>
    [grpc::BindServiceMethod(typeof(ClipboardSyncService), "BindService")]
    public abstract partial class ClipboardSyncServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ClipboardSyncService.SyncResponse> SyncClipboard(global::ClipboardSyncService.ClipboardData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ClipboardSyncService.RegistrationResponse> RegisterNode(global::ClipboardSyncService.NodeInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ClipboardSyncService.NodesResponse> GetActiveNodes(global::ClipboardSyncService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamClipboardUpdates(global::ClipboardSyncService.Empty request, grpc::IServerStreamWriter<global::ClipboardSyncService.ClipboardData> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ClipboardSyncService</summary>
    public partial class ClipboardSyncServiceClient : grpc::ClientBase<ClipboardSyncServiceClient>
    {
      /// <summary>Creates a new client for ClipboardSyncService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ClipboardSyncServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ClipboardSyncService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ClipboardSyncServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ClipboardSyncServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ClipboardSyncServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClipboardSyncService.SyncResponse SyncClipboard(global::ClipboardSyncService.ClipboardData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SyncClipboard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClipboardSyncService.SyncResponse SyncClipboard(global::ClipboardSyncService.ClipboardData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SyncClipboard, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClipboardSyncService.SyncResponse> SyncClipboardAsync(global::ClipboardSyncService.ClipboardData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SyncClipboardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClipboardSyncService.SyncResponse> SyncClipboardAsync(global::ClipboardSyncService.ClipboardData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SyncClipboard, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClipboardSyncService.RegistrationResponse RegisterNode(global::ClipboardSyncService.NodeInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterNode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClipboardSyncService.RegistrationResponse RegisterNode(global::ClipboardSyncService.NodeInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterNode, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClipboardSyncService.RegistrationResponse> RegisterNodeAsync(global::ClipboardSyncService.NodeInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterNodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClipboardSyncService.RegistrationResponse> RegisterNodeAsync(global::ClipboardSyncService.NodeInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterNode, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClipboardSyncService.NodesResponse GetActiveNodes(global::ClipboardSyncService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActiveNodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClipboardSyncService.NodesResponse GetActiveNodes(global::ClipboardSyncService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActiveNodes, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClipboardSyncService.NodesResponse> GetActiveNodesAsync(global::ClipboardSyncService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActiveNodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClipboardSyncService.NodesResponse> GetActiveNodesAsync(global::ClipboardSyncService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActiveNodes, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::ClipboardSyncService.ClipboardData> StreamClipboardUpdates(global::ClipboardSyncService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamClipboardUpdates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::ClipboardSyncService.ClipboardData> StreamClipboardUpdates(global::ClipboardSyncService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamClipboardUpdates, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ClipboardSyncServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ClipboardSyncServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ClipboardSyncServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SyncClipboard, serviceImpl.SyncClipboard)
          .AddMethod(__Method_RegisterNode, serviceImpl.RegisterNode)
          .AddMethod(__Method_GetActiveNodes, serviceImpl.GetActiveNodes)
          .AddMethod(__Method_StreamClipboardUpdates, serviceImpl.StreamClipboardUpdates).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ClipboardSyncServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SyncClipboard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ClipboardSyncService.ClipboardData, global::ClipboardSyncService.SyncResponse>(serviceImpl.SyncClipboard));
      serviceBinder.AddMethod(__Method_RegisterNode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ClipboardSyncService.NodeInfo, global::ClipboardSyncService.RegistrationResponse>(serviceImpl.RegisterNode));
      serviceBinder.AddMethod(__Method_GetActiveNodes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ClipboardSyncService.Empty, global::ClipboardSyncService.NodesResponse>(serviceImpl.GetActiveNodes));
      serviceBinder.AddMethod(__Method_StreamClipboardUpdates, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ClipboardSyncService.Empty, global::ClipboardSyncService.ClipboardData>(serviceImpl.StreamClipboardUpdates));
    }

  }
}
#endregion
